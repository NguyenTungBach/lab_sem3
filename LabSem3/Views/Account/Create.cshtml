@model LabSem3.Models.ViewModel.AccountViewModel

@{
    ViewBag.Title = "Create";
    
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>AccountViewModel</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ComfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.ComfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ComfirmPassword, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="control-label col-md-2">
            Role
        </div>
        @foreach (var item in ViewBag.Role)
        {
            <div class="col-md-10">
                <div>
                    <input type="checkbox" value="@item.Name" id="@item.Name" class="roleCheck">
                    <label class="form-check-label" for="@item.Name">
                        @item.Name
                    </label>
                </div>
            </div>
        }
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Role, new { htmlAttributes = new { @class = "form-control", @id = "arrayRole" } })
            @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input style=" background-color: antiquewhite; border-color: skyblue;" type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-3.4.1.js"></script>
<script>
    //$(document).on("click", '.roleCheck', function () {
        
    //})

    const selectStatus = $('.roleCheck');
    $(document).ready(function () {
        let array = new Set();
        for (let i = 0; i < selectStatus.length; i++) { // Kiểm tra từng selectStatus
            if (selectStatus[i].checked && $(this).val() == "WAITING") {
                selectStatus.prop('checked', false);
                $(this).prop('checked', true);
                array.add("WAITING"); // thì đưa vào Set
            }
            if (selectStatus[i].checked && $(this).val() != "WAITING") { // Nếu có selectStatus được check
                array.add(selectStatus[i].value); // thì đưa vào Set
            }
        }
        $('#arrayRole').val(Array.from(array));
    });

    selectStatus.on('click', function () {
        let array = new Set();
        let value = this.value;
        let checkWait = true; // kiểm tra có wait không
        for (let i = 0; i < selectStatus.length; i++) { // Kiểm tra từng selectStatus
            if (selectStatus[i].checked) { // Nếu có selectStatus được check
                array.add(selectStatus[i].value); // thì đưa vào Set
            }
        }

        if ($(this).prop('checked')) {
            for (let i = 0; i < selectStatus.length; i++) { // Kiểm tra từng selectStatus
                if (selectStatus[i].checked && selectStatus[i].value == "WAITING") { // Nếu có selectStatus được check
                    checkWait = true;
                    $(this).prop('checked', false); // nếu trong tất cả có wait thì bỏ check
                    array = new Set();
                    array.add("WAITING"); // thì đưa vào Set
                }
            }
            // kiểm tra có check status = wait không
            if (value == "WAITING") {
                checkWait = true;
                array = new Set();
                selectStatus.prop('checked', false);
                $(this).prop('checked', true);
                array.add("WAITING"); // thì đưa vào Set
            }
            if (!checkWait) { // nếu kiểm tra tất cả mà không có wait
                array.add(value); // thì thêm vào mảng
            }
        } else {
            if (array.has(value)) {
                array.delete(value);
            }
        }
        console.log('array la: ' + Array.from(array));
        $('#arrayRole').val(Array.from(array));
    });
</script>