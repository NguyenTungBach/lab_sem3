@model LabSem3.Models.ViewModel.AccountEditViewModel
@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Edit";
}

<h2 style="font-weight: bold;">Edit</h2>


@using (Html.BeginForm("EditPost", "Account", FormMethod.Post))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>AccountViewModel</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

    <div class="form-group">
            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
            </div>
        </div>

    <div class="form-group">
        @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Thumbnail, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            <Input style="color:aliceblue;" type="button" value="Upload"  class="btn btn-default bg-primary" id="upload_widget" class="cloudinary-button mb-3"></Input>

            <div id="preview-image">
                @if (Model.Thumbnail != null)
                {
                    <div class="col-md-3 col-sm-3 position-relative" style="padding-left: 0 !important;">
                        <img src="@Model.Thumbnail"
                             class="col-md-12 col-sm-12 img-thumbnail mr-2 mb-2 imagesChoice">
                    </div>
                }
            </div>
            <input class="form-control text-box single-line" data-val="true" data-val-required="Thumbnail Required" id="Thumbnail" name="Thumbnail" type="text" value="@Model.Thumbnail" hidden>
            @*@Html.EditorFor(model => model.Thumbnail, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.ValidationMessageFor(model => model.Thumbnail, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Birthday, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            <input class="form-control text-box single-line" data-val="true" data-val-date="The field Birthday must be a date." data-val-required="Birthday Required" id="Birthday" name="Birthday" type="date" value="@(Model.Birthday != null ? string.Format("{0:yyyy-MM-dd}", Model.Birthday) : "")">
            @*@Html.EditorFor(model => model.Birthday, new { htmlAttributes = new { @class = "form-control" } })*@
            @Html.ValidationMessageFor(model => model.Birthday, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
        </div>
    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ComfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.ComfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ComfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>*@

    <div class="form-group">
        <div class="control-label col-md-2">
            Role
        </div>
        @foreach (var item in ViewBag.Role)
        {
            <div class="col-md-4">
                <div>
                    <input type="checkbox" value="@item.Name" id="@item.Name" class="roleCheck"
                           @foreach (var roleAccount in ViewBag.RoleAccounts) { @(roleAccount == item.Name ? "checked" : "") }>
                    <label class="form-check-label" for="@item.Name">
                        @item.Name
                    </label>
                </div>
            </div>
        }
    </div>

    <div class="form-group" hidden>
        @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-4">
            @Html.EditorFor(model => model.Role, new { htmlAttributes = new { @class = "form-control", @id = "arrayRole" } })
            @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="control-label col-md-2">
            Status
        </div>
        <select class="form-control col-2" style="margin-left: 10px" id="Status" name="Status">
            @foreach (var item in EnumHelper.GetSelectList(typeof(LabSem3.Enum.AccountStatusEnum)))
            {
                <option value="@item.Value" @(Int32.Parse(item.Value) == Model.Status ? "selected" : "")>@item.Text</option>
            }
        </select>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-4">
            <input style="color:aliceblue;" type="submit" value="Update" class="btn btn-default bg-primary" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="https://upload-widget.cloudinary.com/global/all.js" type="text/javascript"></script>
<script>
    const selectStatus = $('.roleCheck');
    $(document).ready(function () {
        let array = new Set();
        for (let i = 0; i < selectStatus.length; i++) { // Kiểm tra từng selectStatus
            if (selectStatus[i].checked && $(this).val() == "WAITING") {
                selectStatus.prop('checked', false);
                $(this).prop('checked', true);
                array.add("WAITING"); // thì đưa vào Set
            }
            if (selectStatus[i].checked && $(this).val() != "WAITING") { // Nếu có selectStatus được check
                array.add(selectStatus[i].value); // thì đưa vào Set
            }
        }
        $('#arrayRole').val(Array.from(array));
    });

    selectStatus.on('click', function () {
        let array = new Set();
        let value = this.value;
        let checkWait = true; // kiểm tra có wait không
        for (let i = 0; i < selectStatus.length; i++) { // Kiểm tra từng selectStatus
            if (selectStatus[i].checked) { // Nếu có selectStatus được check
                array.add(selectStatus[i].value); // thì đưa vào Set
            }
        }

        if ($(this).prop('checked')) {
            for (let i = 0; i < selectStatus.length; i++) { // Kiểm tra từng selectStatus
                if (selectStatus[i].checked && selectStatus[i].value == "WAITING") { // Nếu có selectStatus được check
                    checkWait = true;
                    $(this).prop('checked', false); // nếu trong tất cả có wait thì bỏ check
                    array = new Set();
                    array.add("WAITING"); // thì đưa vào Set
                }
            }
            // kiểm tra có check status = wait không
            if (value == "WAITING") {
                checkWait = true;
                array = new Set();
                selectStatus.prop('checked', false);
                $(this).prop('checked', true);
                array.add("WAITING"); // thì đưa vào Set
            }
            if (!checkWait) { // nếu kiểm tra tất cả mà không có wait
                array.add(value); // thì thêm vào mảng
            }
        } else {
            if (array.has(value)) {
                array.delete(value);
            }
        }
        console.log('array la: ' + Array.from(array));
        $('#arrayRole').val(Array.from(array));
    });
</script>

<script type="text/javascript">
    $(document).ready(function () {
        var form = document.getElementById('Thumbnail');
        var listImg = document.getElementById('preview-image')
        console.log(listImg)
        console.log(form);
        var myWidget = cloudinary.createUploadWidget({
            cloudName: 'dark-faith',
            uploadPreset: 'nqbsybdh'
        }, (error, result) => {
            if (!error && result && result.event === "success") {
                //console.log('Done! Here is the image info: ', result.info);
                //form.value = result.info.secure_url + ',';
                form.value = result.info.secure_url;
                listImg.innerHTML = `
                    <div class="col-md-3 col-sm-3 position-relative" style="padding-left: 0 !important;">
                                        <a id="close_img" class="close-preview" onclick="deleteImage('${result.info.delete_token}','${result.info.secure_url}')">&#10006;</a>
                                        <img src="${result.info.secure_url}"
                                             class="col-md-12 col-sm-12 img-thumbnail mr-2 mb-2 imagesChoice">
                                    </div>
                       `
                // console.log('Done! Here is the image info: ', result.info.url);
                console.log('Done! Here is the image info: ', result.info.secure_url);
            }
        }
        )

        document.getElementById("upload_widget").addEventListener("click", function () {
            myWidget.open();
        }, false);
    });

    $(document).on("click", '#close_img', function () {
        $(this).parent().hide();
    });

    function deleteImage(delete_token, secure_url) {
        var src = secure_url;
        const url = "https://api.cloudinary.com/v1_1/dark-faith/delete_by_token"; // Nếu đổi tài khoản thì nhớ chú ý đổi cái api này
        $.ajax({
            url: url, // gửi ajax đến file result.php
            type: "POST", // chọn phương thức gửi là post
            data: { // Danh sách các thuộc tính sẽ gửi đi
                token: delete_token
            },
            error: function () {
                alert("Có lỗi xảy ra!");
            }
        });

        var array_thubmail_before = document.getElementById('Thumbnail').value.split(',');
        array_thubmail_before.pop();
        // const obj = JSON.parse(src);
        // tìm đến những phần tử khác obj.secure_url
        const array_thubmail_after = array_thubmail_before.filter(thumbnail => { return thumbnail !== src });
        if (array_thubmail_after.length > 0) {
            document.getElementById('Thumbnail').value = array_thubmail_after.join(',') + ',';
        } else {
            document.getElementById('Thumbnail').value = "";
        }

        // console.log("Phần tử hiện tại là:", this );
        console.log("Giá trị trong thumbnail là:", document.getElementById('Thumbnail').value);
    }

</script>